{
    "Alloc": {
        "Type": "gauge",
        "Name": "Alloc",
        "Description": "Alloc is bytes of allocated heap objects.",
        "Value": 24293912
    },
    "FreeMemory": {
        "Type": "gauge",
        "Name": "FreeMemory",
        "Description": "RAM available for programs to allocate",
        "Value": 7740977152
    },
    "PollCount": {
        "Type": "counter",
        "Name": "PollCount",
        "Description": "PollCount is quantity of metrics collection iteration.",
        "Value": 3
    },
    "TotalMemory": {
        "Type": "gauge",
        "Name": "TotalMemory",
        "Description": "Total amount of RAM on this system",
        "Value": 16054480896
    }
}

# HELP Alloc Alloc is bytes of allocated heap objects.
# TYPE Alloc gauge
Alloc 2.427184e+07
# HELP FreeMemory RAM available for programs to allocate
# TYPE FreeMemory gauge
FreeMemory 7.740977152e+09
# HELP PollCount PollCount is quantity of metrics collection iteration.
# TYPE PollCount counter
PollCount 1
# HELP TotalMemory Total amount of RAM on this system
# TYPE TotalMemory gauge
TotalMemory 1.6054480896e+10

Jinja2
Jinja2 — это современный и полнофункциональный движок шаблонов для Python. Он позволяет создавать шаблоны с использованием синтаксиса, похожего на Django и другие веб-фреймворки, предоставляя такие возможности, как подстановка переменных, условные операторы, циклы и фильтры.
Основные конструкции Jinja2
Шаблоны Jinja2 используют синтаксис, основанный на двойных фигурных скобках {{ }} для выражений и {% %} для управляющих конструкций. Вот некоторые из основных конструкций:
{{ variable }} — выводит значение переменной.
{% if condition %}...{% endif %} — условный блок, выводящий содержимое, если условие истинно.
{% for item in list %}...{% endfor %} — цикл, проходящий по элементам списка или словаря.
Фильтры, такие как | url_encode, позволяют модифицировать выводимые данные.
Пример использования Jinja2

from jinja2 import Template
import sys


# Структура для хранения информации о работнике
employees = [
   {
       "FullName": "Александр Смирнов",
       "Salaries": [50000, 52000, 54000, 55000],
   },
   {
       "FullName": "Екатерина Петрова",
       "Department": "Маркетинг",
       "Salaries": [60000, 62000, 64000, 65000],
   },
]


# Шаблон для отображения информации о работниках
employee_template = """
{% for employee in employees %}
Работник: {{ employee.FullName }}{% if employee.Department %} / Отдел: {{ employee.Department }}{% endif %}
Выплаченная зарплата: {% for salary in employee.Salaries %}{{ salary }} {% endfor %}
{% endfor %}
"""


def main():
   # Создание шаблона
   tmpl = Template(employee_template)


   # Выполнение шаблона и вывод результата
   try:
       output = tmpl.render(employees=employees)
       print(output)
   except Exception as e:
       print(f"Ошибка при выполнении шаблона: {e}", file=sys.stderr)
       sys.exit(1)


if __name__ == "__main__":
   main()

   Определение шаблона

   employee_template = """
{% for employee in employees %}
Работник: {{ employee.FullName }}{% if employee.Department %} / Отдел: {{ employee.Department }}{% endif %}
Выплаченная зарплата: {% for salary in employee.Salaries %}{{ salary }} {% endfor %}
{% endfor %}
"""

Шаблон использует цикл {% for employee in employees %} для перебора каждого работника. Для каждого работника выводится его полное имя,
 а если указано поле Department, то выводится и отдел. Затем выводится список зарплат с помощью вложенного цикла {% for salary in employee.Salaries %}

 Создание и рендеринг шаблона.

 def main():
   # Создание шаблона
   tmpl = Template(employee_template)


   # Выполнение шаблона и вывод результата
   try:
       output = tmpl.render(employees=employees)
       print(output)
   except Exception as e:
       print(f"Ошибка при выполнении шаблона: {e}", file=sys.stderr)
       sys.exit(1)



    В функции main мы:
1. Создаём объект шаблона tmpl с помощью Template(employee_template).
2. Выполняем шаблон с данными employees и выводим результат в консоль. В случае ошибки выводится сообщение об ошибке, и программа завершает работу с ненулевым кодом выхода.
Вы разобрались с синтаксисом создания и использования шаблонов. Шаблоны — удобный инструмент, часто используемый для разных задач. В проекте шаблоны помогут вам сформировать формат метрик, удобный для Prometheus.